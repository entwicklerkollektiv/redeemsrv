version: "3.9"

networks:
  web:
    external:
      name: web
  default:
    driver: bridge

services:
  traefik:
    image: traefik:latest
    restart: unless-stopped
    command:
      # define entrypoint (http/80 und https/443)
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # use docker provider
      - "--providers.docker"
      - "--providers.docker.exposedByDefault=false"
      # activate api and dashboard
      - "--api=true"
      - "--api.dashboard=true"
      # logs
      - "--accesslog=true"
      - "--log.level=ERROR"
      # configure letsencrypt
      - "--certificatesresolvers.leresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.leresolver.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.leresolver.acme.storage=/certs/acme.json"
      - "--certificatesresolvers.leresolver.acme.httpchallenge.entrypoint=web"
      # use letsencrypt staging (until verified that everything works as expected)
      #- "--certificatesresolvers.leresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
    ports:
      - "80:80"
      - "443:443"
    networks:
      - web
    volumes:
      - "./certs:/certs"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      # hide from portainer
      - "hidden=true"
      - "owner=system"
      # enable traefik
      - "traefik.enable=true"
      # workaround: route /traefik (and /api) based on referrer
      # see: https://github.com/traefik/traefik/issues/5853
      - "traefik.http.routers.api.rule=Host(`${TRAEFIK_HOST}`) && (PathPrefix(`/traefik`) || Headers(`Referer`, `https://${TRAEFIK_HOST}/traefik/dashboard/`))"
      - "traefik.http.routers.api.entryPoints=web,websecure"
      # Enable TLS and use letsencrypt resolver
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=leresolver"
      - "traefik.http.routers.api.service=api@internal"
#      - "traefik.http.routers.default.priority=-1"
      # Activate Middlewares
      - "traefik.http.routers.api.middlewares=traefik-strip-prefix,apiauth"
      # middleware - Strip prefix (global "strip-prefix" middleware down below does not work for this case here)
      - "traefik.http.middlewares.traefik-strip-prefix.stripprefix.prefixes=/traefik"
      # middleware - add Auth for API and Dashboard access
      - "traefik.http.middlewares.apiauth.basicauth.users=${APIAUTH}"
      # redirect http tp https
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # global middleware: strip prefix and add missing trailing slash
      # eg. for portainer and other applications which do not natively support running behind a subpath/subdirectory
      - "traefik.http.middlewares.strip-prefix.chain.middlewares=strip-prefix-1,strip-prefix-2"
      - "traefik.http.middlewares.strip-prefix-1.redirectregex.regex=^(https?://[^/]+/[a-z0-9_]+)$$"
      - "traefik.http.middlewares.strip-prefix-1.redirectregex.replacement=$${1}/"
      - "traefik.http.middlewares.strip-prefix-1.redirectregex.permanent=true"
      - "traefik.http.middlewares.strip-prefix-2.stripprefixregex.regex=/[a-z0-9_]+"

  portainer:
    image: portainer/portainer-ce:latest
    command:
      # use templatesrv container to locally serve templates
      - "--templates=http://redeemsrv-templates/templates.json"
      # hide containers with matching labels from portainer
      - "--hide-label=owner=system"
      - "--hide-label=hidden=true"
    restart: unless-stopped
    networks:
      - web
    volumes:
      - "./portainer-data:/data"
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      # portainer has to respect proxy settings if present in env
      - http_proxy=${http_proxy}
      - https_proxy=${https_proxy}
      - HTTP_PROXY=${http_proxy}
      - HTTPS_PROXY=${https_proxy}
      - NO_PROXY=${no_proxy}
      - TRAEFIK_HOST=${TRAEFIK_HOST}
    labels:
      # hide from portainer
      - "hidden=true"
      - "owner=system"
      # enable traefik on this container
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.rule=Host(`${TRAEFIK_HOST}`) && PathPrefix(`/portainer`)"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.routers.portainer.tls.certresolver=leresolver"
      # Activate Middlewares - strip prefix (global middleware defined above in traefik container)
      - "traefik.http.routers.portainer.middlewares=strip-prefix"
      # bind to port 9000 in portainer container
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"

  templates:
    build: ./templates
    hostname: redeemsrv-templates
    networks:
      - web
    labels:
      # hide from portainer
      - "hidden=true"
      - "owner=system"
